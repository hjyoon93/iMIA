# Properties to be sent to the BPMN translator, by reflection.
# Java bean attributes with the same name will be set to these values

# Default address of TypeDB server 
edu.gmu.c4i.dalnim.typedb2bpmn.decoder.DecoderImpl.typeDBAddress=localhost:1729

# Default name of the database in TypeDB to access.
edu.gmu.c4i.dalnim.typedb2bpmn.decoder.DecoderImpl.databaseName=BPMN

# UID of default BPMN project to query (regex supported).
edu.gmu.c4i.dalnim.typedb2bpmn.decoder.DecoderImpl.rootUID=https://camunda.org/examples/#.*

# If true, a sanity check will be performed at the end of the decoding process
edu.gmu.c4i.dalnim.typedb2bpmn.decoder.DecoderImpl.runSanityCheck=true

# Common prefix of BPMN entities
edu.gmu.c4i.dalnim.typedb2bpmn.decoder.DecoderImpl.BPMNEntityNamePrefix=BPMN_

# Common prefix of BPMN attributes
edu.gmu.c4i.dalnim.typedb2bpmn.decoder.DecoderImpl.BPMNAttributeNamePrefix=BPMNattrib_

# Name o BPMN textual DOM children.
edu.gmu.c4i.dalnim.typedb2bpmn.decoder.DecoderImpl.BPMNTextContentAttributeName=BPMN_textContent

# If true, mapping from BPMN elements to entities in the conceptual model will be considered
edu.gmu.c4i.dalnim.typedb2bpmn.decoder.DecoderImpl.mapBPMNToConceptualModel=false

# Template of TypeQL to be used to retrieve the root BPMN object. 
# Annotated keywords between "@{" and "}" will be retrieved from attributes in the same class.
edu.gmu.c4i.dalnim.typedb2bpmn.decoder.DecoderImpl.rootQueryTemplate=match \n \
	$query like "@{rootUID}"; \n \
	$entity isa BPMN_definitions, has UID $uid_b, has attribute $attribute; \n \
	$mission isa Mission, has UID $uid_m; \n \
	{ $uid_m = $query; } or {  $uid_b = $query ;}; \n \
	(bpmnEntity: $entity, conceptualModel: $mission) isa BPMN_hasConceptualModelElement; \n \
	get $entity, $attribute;
# Template of TypeQL to be used to retrieve the root BPMN object when mapBPMNToConceptualModel = false. 
edu.gmu.c4i.dalnim.typedb2bpmn.decoder.DecoderImpl.rootQueryTemplateNoConceptModel=match \n \
	$query like "@{rootUID}"; \n \
	$entity isa BPMN_definitions, has UID $uid_b, has attribute $attribute; \n \
	$uid_b = $query; \n \
	get $entity, $attribute;

# Template of TypeQL to be used to retrieve the children of a BPMN object identified by its UID. 
# # The value of @{parentUID} will be retrieved dynamically while visiting the BPMN objects.
edu.gmu.c4i.dalnim.typedb2bpmn.decoder.DecoderImpl.childQueryTemplate=match \n \
	$parent has UID "@{parentUID}"; \n \
	$entity isa BPMN_Entity, has attribute $attribute; \n \
	(parent: $parent, child: $entity) isa BPMN_hasChildTag; \n \
	get $entity, $attribute;

# Name (before appending prefixes) of the special attribute to be used to sort the entities (e.g., because waypoint is sensitive to ordering)
edu.gmu.c4i.dalnim.typedb2bpmn.decoder.DecoderImpl.sortAttributeName=sort

# Name of the @{key} to hold the UID of parent node in the above script.
edu.gmu.c4i.dalnim.typedb2bpmn.decoder.DecoderImpl.parentUIDAttributeName=parentUID

# Name of the universal identifier attribute.
edu.gmu.c4i.dalnim.typedb2bpmn.decoder.DecoderImpl.UIDAttributeName=UID

# The default name of the BPMN file to write.
edu.gmu.c4i.dalnim.typedb2bpmn.Main.BPMNFileName=output.bpmn
